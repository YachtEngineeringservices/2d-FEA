name: Build Windows Executables

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: üîΩ Checkout Repository
      uses: actions/checkout@v4
    
    - name: üêç Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        architecture: 'x64'
    
    - name: üìã Display Python Info
      run: |
        python --version
        python -m pip --version
        echo "Architecture: x64"
    
    - name: üîß Install System Dependencies
      run: |
        # Update pip and install wheel
        python -m pip install --upgrade pip wheel setuptools
    
    - name: üì¶ Install Python Dependencies
      run: |
        # Install core dependencies
        pip install numpy matplotlib scipy plotly
        pip install PySide6 pyinstaller
        pip install gmsh meshio h5py pyvista vtk
        
        # Install MSI creation tools
        pip install cx_Freeze
        
        # Install additional requirements if they exist
        if (Test-Path "requirements_windows.txt") {
          pip install -r requirements_windows.txt
        } elseif (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        }
    
    - name: üîç Verify Installation
      run: |
        python -c "import sys; print('Python:', sys.version)"
        python -c "import numpy; print('NumPy:', numpy.__version__)"
        python -c "import matplotlib; print('Matplotlib:', matplotlib.__version__)"
        python -c "import PySide6; print('PySide6:', PySide6.__version__)"
        python -c "import PyInstaller; print('PyInstaller:', PyInstaller.__version__)"
        python -c "import gmsh; print('GMSH available')"
        python -c "import meshio; print('MeshIO:', meshio.__version__)"
        python -c "import h5py; print('h5py:', h5py.__version__)"
        python -c "import pyvista; print('PyVista:', pyvista.__version__)"
        python -c "import cx_Freeze; print('cx_Freeze:', cx_Freeze.__version__)"
    
    - name: üèóÔ∏è Create Build Directories
      run: |
        New-Item -ItemType Directory -Force -Path "dist"
        New-Item -ItemType Directory -Force -Path "build"
    
    - name: üìù Create cx_Freeze Setup Script
      run: |
        # Create setup script for MSI generation
        @"
        import sys
        import os
        from cx_Freeze import setup, Executable
        
        # Add src directory to path for imports
        sys.path.insert(0, 'src')
        
        # Dependencies to include
        packages = [
            'numpy', 'scipy', 'matplotlib', 'PySide6', 'gmsh', 'meshio', 
            'h5py', 'pyvista', 'vtk', 'json', 'pathlib', 'logging',
            'gui', 'fea'  # Include local modules
        ]
        
        # Files to include - include the entire src directory
        include_files = [
            ('src/gui/', 'lib/gui/'),
            ('src/fea/', 'lib/fea/'),
        ]
        
        # Build options
        build_exe_options = {
            'packages': packages,
            'include_files': include_files,
            'excludes': ['tkinter', 'test', 'unittest', 'distutils'],
            'optimize': 2,
            'path': ['src'],  # Add src to Python path
            'include_path': ['src'],  # Include src in module search
        }
        
        # MSI options
        bdist_msi_options = {
            'upgrade_code': '{12345678-1234-5678-9012-123456789012}',
            'add_to_path': False,
            'initial_target_dir': r'[ProgramFilesFolder]\2D FEA',
        }
        
        # Executable configuration
        executables = [
            Executable(
                'src/main_windows.py',
                base='Win32GUI',
                target_name='2D_FEA.exe',
                shortcut_name='2D FEA Torsion Analysis',
                shortcut_dir='ProgramMenuFolder',
            )
        ]
        
        setup(
            name='2D FEA Torsion Analysis',
            version='1.0.0',
            description='2D Finite Element Analysis for Torsion Problems',
            author='Yacht Engineering Services',
            options={
                'build_exe': build_exe_options,
                'bdist_msi': bdist_msi_options,
            },
            executables=executables,
        )
        "@ | Out-File -FilePath "setup_msi.py" -Encoding UTF8
    
    - name: üî® Build Windows MSI Installer
      run: |
        echo "Building 2D FEA Windows MSI installer..."
        
        # First create the executable
        python setup_msi.py build
        
        # Then create the MSI installer
        python setup_msi.py bdist_msi
        
        # Check if MSI was created
        $msiFiles = Get-ChildItem -Path "dist" -Filter "*.msi" -ErrorAction SilentlyContinue
        if ($msiFiles.Count -gt 0) {
          echo "‚úÖ MSI installer built successfully"
          foreach ($msi in $msiFiles) {
            echo "üì¶ $($msi.Name): $([math]::Round($msi.Length / 1MB, 1)) MB"
          }
        } else {
          echo "‚ùå MSI installer build failed"
          Get-ChildItem "dist/" -ErrorAction SilentlyContinue
          exit 1
        }
    
    - name: üß™ Test MSI Installer
      run: |
        echo "Testing MSI installer..."
        $msiFiles = Get-ChildItem -Path "dist" -Filter "*.msi"
        if ($msiFiles.Count -gt 0) {
          foreach ($msi in $msiFiles) {
            echo "MSI Installer: $($msi.Name) - $([math]::Round($msi.Length / 1MB, 1)) MB"
          }
          
          # Basic MSI validation
          echo "Performing basic MSI validation..."
          $msi = $msiFiles[0]
          
          # Check if it's a valid MSI file (basic signature check)
          try {
            $bytes = [System.IO.File]::ReadAllBytes($msi.FullName)
            # MSI files start with "PK" signature or have MSI header
            if ($msi.Extension -eq ".msi" -and $msi.Length -gt 1MB) {
              echo "‚úÖ Valid MSI installer format"
              echo "‚úÖ File size reasonable: $([math]::Round($msi.Length / 1MB, 1)) MB"
            } else {
              echo "‚ö†Ô∏è MSI file seems unusual"
            }
          } catch {
            echo "‚ö†Ô∏è Could not validate MSI format, but file exists"
          }
          
          echo "‚úÖ MSI installer validation completed"
          
        } else {
          echo "‚ùå MSI installer not found"
          exit 1
        }
    
    - name: üì¶ Create Distribution Package
      run: |
        echo "Creating distribution package..."
        
        # Get MSI file info
        $msiFiles = Get-ChildItem -Path "dist" -Filter "*.msi"
        if ($msiFiles.Count -eq 0) {
          echo "‚ùå No MSI files found"
          exit 1
        }
        
        $msiFile = $msiFiles[0]
        $distFolder = "2D_FEA_Windows_MSI_3.12_x64"
        New-Item -ItemType Directory -Force -Path $distFolder
        
        # Copy MSI installer
        Copy-Item $msiFile.FullName "$distFolder/"
        
        # Create README for distribution
        $readme = @"
        # 2D FEA Windows MSI Installer
        
        Built on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
        Python Version: 3.12
        Architecture: x64
        Installer Type: MSI (Windows Installer)
        
        ## Installation:
        
        1. **Download** the MSI file: $($msiFile.Name)
        2. **Right-click** and select "Install" or double-click to run
        3. **Follow** the installation wizard
        4. **Launch** from Start Menu: "2D FEA Torsion Analysis"
        
        ## Features:
        
        - ‚úÖ **Professional Windows Installation** with MSI installer
        - ‚úÖ **Start Menu Integration** with shortcuts
        - ‚úÖ **Proper Uninstall Support** via Windows Control Panel
        - ‚úÖ **Smaller Download Size** compared to standalone EXE
        - ‚úÖ **System Integration** follows Windows standards
        
        ## Application Features:
        
        - Geometry input and visualization
        - Mesh generation with GMSH  
        - 3D visualization with PyVista/VTK
        - Save/Load project files
        - Results visualization with matplotlib
        
        ## System Requirements:
        
        - Windows 10/11 (64-bit)
        - Administrator rights for installation
        - ~200MB disk space after installation
        
        ## Uninstallation:
        
        - Open "Add or Remove Programs" in Windows Settings
        - Find "2D FEA Torsion Analysis" and click Uninstall
        - Or use Programs and Features in Control Panel
        
        ## Troubleshooting:
        
        - **Installation blocked**: Right-click MSI ‚Üí Properties ‚Üí Unblock ‚Üí OK
        - **Windows Defender warning**: Click "More info" ‚Üí "Run anyway"
        - **Admin required**: Right-click MSI ‚Üí "Run as administrator"
        
        ## Build Information:
        
        - Built with cx_Freeze and Windows Installer
        - Includes PySide6, matplotlib, numpy, GMSH, PyVista, VTK
        - Professional MSI installer with proper registration
        
        For support, visit: https://github.com/YachtEngineeringservices/2d-FEA
        "@
        $readme | Out-File -FilePath "$distFolder/README.txt" -Encoding UTF8
        
        # Create ZIP package
        Compress-Archive -Path "$distFolder/*" -DestinationPath "$distFolder.zip" -Force
        
        echo "Distribution package created: $distFolder.zip"
        Get-Item "$distFolder.zip" | Format-List Name, Length
    
    - name: üìä Build Summary
      run: |
        echo "=== BUILD SUMMARY ==="
        echo "Python Version: 3.12"
        echo "Architecture: x64"
        echo "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        echo ""
        echo "Built Application:"
        $msiFiles = Get-ChildItem -Path "dist" -Filter "*.msi" -ErrorAction SilentlyContinue
        if ($msiFiles.Count -gt 0) {
          foreach ($msi in $msiFiles) {
            $sizeMB = $msi.Length / 1MB
            echo "‚úÖ $($msi.Name) ({0:N1} MB)" -f $sizeMB
          }
        }
        echo ""
        echo "Distribution Packages:"
        Get-ChildItem -Filter "*.zip" | ForEach-Object {
          $sizeMB = $_.Length / 1MB
          echo "üì¶ $($_.Name) ({0:N1} MB)" -f $sizeMB
        }
    
    - name: üì§ Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 2D-FEA-Windows-MSI-Python3.12-x64
        path: |
          dist/*.msi
          *.zip
          setup_msi.py
        retention-days: 30
    
    - name: üì§ Upload Distribution ZIP
      uses: actions/upload-artifact@v4
      with:
        name: 2D-FEA-Windows-MSI-Distribution-Python3.12
        path: "*.zip"
        retention-days: 90

  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: üîΩ Download All Artifacts
      uses: actions/download-artifact@v4
    
    - name: üì¶ Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/*.zip
          **/*.msi
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
