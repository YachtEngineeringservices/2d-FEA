name: Build Windows Executables

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: üîΩ Checkout Repository
      uses: actions/checkout@v4
    
    - name: üêç Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        architecture: 'x64'
    
    - name: üìã Display Python Info
      run: |
        python --version
        python -m pip --version
        echo "Architecture: x64"
    
    - name: üîß Install System Dependencies
      run: |
        # Update pip and install wheel
        python -m pip install --upgrade pip wheel setuptools
    
    - name: üì¶ Install Python Dependencies
      run: |
        # Install core dependencies
        pip install numpy matplotlib scipy plotly
        pip install PySide6 pyinstaller
        pip install gmsh meshio h5py pyvista vtk
        
        # Install additional requirements if they exist
        if (Test-Path "requirements_windows.txt") {
          pip install -r requirements_windows.txt
        } elseif (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        }
    
    - name: üîç Verify Installation
      run: |
        python -c "import sys; print('Python:', sys.version)"
        python -c "import numpy; print('NumPy:', numpy.__version__)"
        python -c "import matplotlib; print('Matplotlib:', matplotlib.__version__)"
        python -c "import PySide6; print('PySide6:', PySide6.__version__)"
        python -c "import PyInstaller; print('PyInstaller:', PyInstaller.__version__)"
        python -c "import gmsh; print('GMSH available')"
        python -c "import meshio; print('MeshIO:', meshio.__version__)"
        python -c "import h5py; print('h5py:', h5py.__version__)"
        python -c "import pyvista; print('PyVista:', pyvista.__version__)"
    
    - name: üèóÔ∏è Create Build Directories
      run: |
        New-Item -ItemType Directory -Force -Path "dist"
        New-Item -ItemType Directory -Force -Path "build"
    
    - name: üìù Create PyInstaller Spec for Directory Build
      run: |
        # Create spec file for directory-based build (much smaller than single EXE)
        @"
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        import os
        from PyInstaller.utils.hooks import collect_data_files, collect_submodules

        # Collect data files for various packages
        datas = []
        datas += collect_data_files('matplotlib')
        datas += collect_data_files('PySide6')

        # Hidden imports for dependencies
        hiddenimports = []
        hiddenimports += collect_submodules('matplotlib')
        hiddenimports += collect_submodules('PySide6')
        hiddenimports += ['numpy', 'scipy', 'json', 'pathlib', 'gmsh', 'meshio', 'h5py', 'pyvista', 'vtk']
        hiddenimports += ['gui.main_window', 'gui.mpl_canvas', 'fea.meshing', 'fea.solver']

        block_cipher = None

        a = Analysis(
            ['src/main_windows.py'],
            pathex=['src'],
            binaries=[],
            datas=datas,
            hiddenimports=hiddenimports,
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=['tkinter', 'test', 'unittest'],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='2D_FEA',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=False,
            disable_windowed_traceback=False,
            target_arch='x64',
            codesign_identity=None,
            entitlements_file=None,
            icon=None,
        )

        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='2D_FEA_Windows',
        )
        "@ | Out-File -FilePath "build_directory.spec" -Encoding UTF8
    
    - name: üî® Build Windows Application Directory
      run: |
        echo "Building 2D FEA Windows application directory..."
        
        # Build using PyInstaller directory mode (much smaller than single EXE)
        pyinstaller build_directory.spec --clean --noconfirm
        
        # Check if directory was created
        if (Test-Path "dist/2D_FEA_Windows") {
          echo "‚úÖ Application directory built successfully"
          
          # Show directory contents and size
          $dirSize = (Get-ChildItem -Path "dist/2D_FEA_Windows" -Recurse | Measure-Object -Property Length -Sum).Sum
          $sizeMB = [math]::Round($dirSize / 1MB, 1)
          echo "üìÅ Directory size: $sizeMB MB"
          
          # Check for main executable
          if (Test-Path "dist/2D_FEA_Windows/2D_FEA.exe") {
            echo "‚úÖ Main executable found: 2D_FEA.exe"
          } else {
            echo "‚ùå Main executable not found"
            exit 1
          }
        } else {
          echo "‚ùå Application directory build failed"
          Get-ChildItem "dist/" -ErrorAction SilentlyContinue
          exit 1
        }
    
    - name: üß™ Test Application Directory
      run: |
        echo "Testing application directory..."
        if (Test-Path "dist/2D_FEA_Windows/2D_FEA.exe") {
          $exe = Get-Item "dist/2D_FEA_Windows/2D_FEA.exe"
          echo "Main executable: $($exe.Name) - $([math]::Round($exe.Length / 1MB, 1)) MB"
          
          # Count total files in distribution
          $fileCount = (Get-ChildItem -Path "dist/2D_FEA_Windows" -Recurse -File).Count
          echo "Total files in distribution: $fileCount"
          
          # Calculate total size
          $totalSize = (Get-ChildItem -Path "dist/2D_FEA_Windows" -Recurse | Measure-Object -Property Length -Sum).Sum
          $totalSizeMB = [math]::Round($totalSize / 1MB, 1)
          echo "Total distribution size: $totalSizeMB MB"
          
          echo "‚úÖ Application directory validation completed"
          
        } else {
          echo "‚ùå Application executable not found"
          exit 1
        }
    
    - name: üì¶ Create Distribution Package
      run: |
        echo "Creating distribution package..."
        
        # Check if application directory exists
        if (-not (Test-Path "dist/2D_FEA_Windows")) {
          echo "‚ùå Application directory not found"
          exit 1
        }
        
        $distFolder = "2D_FEA_Windows_Directory_3.12_x64"
        New-Item -ItemType Directory -Force -Path $distFolder
        
        # Copy the entire application directory
        Copy-Item -Path "dist/2D_FEA_Windows" -Destination "$distFolder/" -Recurse
        
        # Create README for distribution
        $readme = @"
        # 2D FEA Windows Application - Directory Distribution
        
        Built on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
        Python Version: 3.12
        Architecture: x64
        Distribution Type: Directory (Portable)
        
        ## Installation:
        
        1. **Extract** this ZIP file to any location (e.g., C:\Program Files\2D FEA\)
        2. **Navigate** to the extracted 2D_FEA_Windows folder
        3. **Run** 2D_FEA.exe to start the application
        4. **Optional**: Create a desktop shortcut to 2D_FEA.exe
        
        ## Advantages:
        
        - ‚úÖ **Much smaller download** compared to single EXE (~100-200MB vs 400-500MB)
        - ‚úÖ **Faster startup** - no extraction needed
        - ‚úÖ **Portable** - works from any location
        - ‚úÖ **No installation required** - just extract and run
        - ‚úÖ **Easy to move or backup** - just copy the folder
        
        ## Application Features:
        
        - Geometry input and visualization
        - Mesh generation with GMSH  
        - 3D visualization with PyVista/VTK
        - Save/Load project files
        - Results visualization with matplotlib
        
        ## System Requirements:
        
        - Windows 10/11 (64-bit)
        - No Python installation required (bundled)
        - ~200MB disk space after extraction
        
        ## Usage:
        
        - Simply run 2D_FEA_Windows/2D_FEA.exe
        - All dependencies are included in the folder
        - Can be run from USB drive or network location
        
        ## Troubleshooting:
        
        - **Windows Defender warning**: Right-click ‚Üí Properties ‚Üí Unblock ‚Üí OK
        - **Slow first startup**: Windows may scan all files initially
        - **Missing files**: Ensure all files in 2D_FEA_Windows folder are present
        
        ## Build Information:
        
        - Built with PyInstaller directory mode
        - Includes PySide6, matplotlib, numpy, GMSH, PyVista, VTK
        - All files organized in structured directory layout
        
        For support, visit: https://github.com/YachtEngineeringservices/2d-FEA
        "@
        $readme | Out-File -FilePath "$distFolder/README.txt" -Encoding UTF8
        
        # Create ZIP package
        Compress-Archive -Path "$distFolder/*" -DestinationPath "$distFolder.zip" -Force
        
        echo "Distribution package created: $distFolder.zip"
        Get-Item "$distFolder.zip" | Format-List Name, Length
    
    - name: üìä Build Summary
      run: |
        echo "=== BUILD SUMMARY ==="
        echo "Python Version: 3.12"
        echo "Architecture: x64"
        echo "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        echo ""
        echo "Built Application:"
        if (Test-Path "dist/2D_FEA_Windows") {
          $totalSize = (Get-ChildItem -Path "dist/2D_FEA_Windows" -Recurse | Measure-Object -Property Length -Sum).Sum
          $sizeMB = [math]::Round($totalSize / 1MB, 1)
          echo "‚úÖ 2D_FEA_Windows directory ($sizeMB MB)"
        }
        echo ""
        echo "Distribution Packages:"
        Get-ChildItem -Filter "*.zip" | ForEach-Object {
          $sizeMB = $_.Length / 1MB
          echo "üì¶ $($_.Name) ({0:N1} MB)" -f $sizeMB
        }
    
    - name: üì§ Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 2D-FEA-Windows-Directory-Python3.12-x64
        path: |
          dist/2D_FEA_Windows/
          *.zip
          build_directory.spec
        retention-days: 30
    
    - name: üì§ Upload Distribution ZIP
      uses: actions/upload-artifact@v4
      with:
        name: 2D-FEA-Windows-Directory-Distribution-Python3.12
        path: "*.zip"
        retention-days: 90

  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: üîΩ Download All Artifacts
      uses: actions/download-artifact@v4
    
    - name: üì¶ Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
